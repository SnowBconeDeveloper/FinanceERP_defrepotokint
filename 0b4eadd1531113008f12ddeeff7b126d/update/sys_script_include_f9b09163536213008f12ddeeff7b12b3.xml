<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_fcms_intg.UserRoleSyncResponseHandler</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>UserRoleSyncResponseHandler</name>
        <script><![CDATA[var UserRoleSyncResponseHandler = Class.create();

UserRoleSyncResponseHandler.handleResponse = function(result) {
    var source = result.source;
    var service = result.service;
    var input = result.input;
    var context = result.context;
    var response = result.response;

    var erpSource = new ErpSourceConfig(source.fin_erp);

    var parser = UserRoleSyncParserFactory.findParser(erpSource);
    parser = new parser(response);

    if (!parser.isValidResponse()) {
        gs.info('UserRoleSynchronier - Invalid response from ERP');
        return;
    }

    var gr = new GlideRecord(IntgConstants.SYS_CLASS_ERP_ROLE_MAP);
    gr.addEncodedQuery(input[IntgConstants.SYS_CLASS_ERP_ROLE_MAP]);
    gr.query();
    if (gr.next()) {

        var sysUserRoleSysID = gr.getValue('role');
        var sysUserShadowRoleSysIDs = gr.getValue('shadow_roles');
        var erpUserIDs = parser.getUserIDs();

        var erpUserMapper = new ErpUserMapper(erpSource);
        var updatedUserIDs = erpUserMapper.doAssignAndRevokeRole(sysUserRoleSysID, erpUserIDs, sysUserShadowRoleSysIDs);

        if (sysUserShadowRoleSysIDs)
            sysUserRoleSysID = sysUserRoleSysID + ',' + sysUserShadowRoleSysIDs;
		
        var roleManager = new RoleManager(sysUserRoleSysID);
        roleManager.assignRoleToUsers(updatedUserIDs['assigned']);

        //Get the revokedERPUserIds
        var revokedSnowUserIds = updatedUserIDs['revoked'];
        if (revokedSnowUserIds.length) {
            //Fetch system user ids from revokedERPUserIds
            var groupManager = new GroupManager();
            //get group members by group type, users, and ERP source
            var groupMembersGR = groupManager.getGroupMembersByGroupTypeAndUsers(IntgConstants.SYS_JOURNAL_APPROVER_GROUP_TYPE, source.fin_erp, revokedSnowUserIds);
            var revokableGroupMemberIds = [];
            while (groupMembersGR.next()) {
                revokableGroupMemberIds.push(groupMembersGR.getValue('sys_id'));
            }
            //Get all the group members of the journal Approver Types if groups available
            if (revokableGroupMemberIds.length) {
                var plannedTaskAPI = new global.PTGlobalAPI();
                plannedTaskAPI.removeGroupMembersById(revokableGroupMemberIds);
            }
        }
    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-06-13 07:54:05</sys_created_on>
        <sys_id>f9b09163536213008f12ddeeff7b12b3</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>UserRoleSyncResponseHandler</sys_name>
        <sys_package display_value="Finance - ERP Integration" source="sn_fcms_intg">0b4eadd1531113008f12ddeeff7b126d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Finance - ERP Integration">0b4eadd1531113008f12ddeeff7b126d</sys_scope>
        <sys_update_name>sys_script_include_f9b09163536213008f12ddeeff7b12b3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-02 14:03:33</sys_updated_on>
    </sys_script_include>
</record_update>
