<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_fcms_intg.GLAccountActions</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GLAccountActions</name>
        <script><![CDATA[var GLAccountActions = Class.create();

GLAccountActions.doFetch = function(serviceMapGr, glAccountIds) {
    var result = {};
    var erpSourceId = serviceMapGr.source.fin_erp.sys_id + '';
    var erpConfig = new ErpSourceConfig(erpSourceId);

    if (!erpConfig.isValid() || !erpConfig.hasValidService(IntgConstants.ERP_SERVICE_FETCH_GL_ACCOUNTS)) {
        result.status = "failure";
        result.message = gs.getMessage("Integration not setup");
        return result;
    }

    var glAccounts = (gs.nil(glAccountIds) || glAccountIds.length == 0) ? '' : glAccountIds.join(',');
    var input = ERPInputPreparer.prepareFetchGLInput(serviceMapGr, glAccounts);
    var context = {
        "erp_source": erpSourceId
    };

    ErpIntegrator.doService(IntgConstants.ERP_SERVICE_FETCH_GL_ACCOUNTS,
        erpConfig, input, context);
    return {
        "status": "success"
    };
};

/**
 * @param {GlideRecord} serviceMapGr
 * @param {Object} dataObj
 *  subLedger - string
 *  glAccountIds - string[]
 *  periodIds - string[]
 *  ledgerCode - string
 */
GLAccountActions.fetchGLBalance = function(serviceMapGr, dataObj) {
    var subLedger = dataObj.subLedger;
    var glAccountIds = dataObj.glAccountIds;
    var periodIds = dataObj.periodIds;
    var ledgerCode = dataObj.ledgerCode;

    var result = {};
    var erpSourceId = serviceMapGr.source.fin_erp.sys_id + '';
    var erpConfig = new ErpSourceConfig(erpSourceId);

    var ledger = sn_fin.Ledger.getLedgerByCode(erpSourceId, ledgerCode);
    if (!ledger.isValid()) {
        result.status = IntgConstants.STATUS_ERROR;
        result.message = gs.getMessage("Invalid ledger code");
        return result;
    }

    if (!erpConfig.isValid() || !erpConfig.hasValidService(IntgConstants.ERP_SERVICE_FETCH_GL_BALANCE)) {
        result.status = "failure";
        result.message = gs.getMessage("Integration not setup");
        return result;
    }

    var periods = (gs.nil(periodIds) || periodIds.length == 0) ?
        sn_fin.FiscalPeriod.getLastTwoPeriodIds() : periodIds.join(',');
    var accountIds = (gs.nil(glAccountIds) || glAccountIds.length == 0) ? '' : glAccountIds.join(',');

    var input = ERPInputPreparer.prepareFetchGLBalanceInput(serviceMapGr, periods, accountIds);
    var context = {
        "erp_source": erpSourceId,
        "sub_ledger_account": dataObj.subLedger,
        "ledger_code": ledgerCode
    };

    ErpIntegrator.doService(IntgConstants.ERP_SERVICE_FETCH_GL_BALANCE, erpConfig, input, context);
    return {
        "status": IntgConstants.STATUS_SUCCESS
    };
};

/**
 * @param {GlideRecord} serviceMapGr
 *  periodIds - string[]
 *  ledgerCode - string
 */
GLAccountActions.fetchActivityForGLBalance = function(serviceMapGr, dataObj) {
    var result = {};
    var erpSourceId = serviceMapGr.source.fin_erp.sys_id + '';
    var erpConfig = new ErpSourceConfig(erpSourceId);

    if (!erpConfig.isValid() || !erpConfig.hasValidService(IntgConstants.ERP_SERVICE_FETCH_ACTIVITY)) {
        result.status = "failure";
        result.message = gs.getMessage("Integration not setup");
        return result;
    }

    var periodIds = dataObj.periodIds;
    var periods = (gs.nil(periodIds) || periodIds.length == 0) ?
        sn_fin.FiscalPeriod.getLastTwoPeriodIds().split(',') : periodIds;

    periods.forEach(function(period) {
        var accPeriod = sn_fin.AccountingPeriod.getAccountingPeriodByFiscalPeriod(period);
		var accPeriodId = accPeriod.getValue('sys_id');
        if (!LedgerActivity.hasBalance(accPeriodId, erpSourceId))
            return;

        var input = ERPInputPreparer.prepareFetchGLActivityInput(serviceMapGr, accPeriodId);
        var context = {
            "erp_source": erpSourceId,
            "primary_ledger_code": dataObj.ledgerCode
        };

        result = ErpIntegrator.doService(IntgConstants.ERP_SERVICE_FETCH_ACTIVITY,
            erpConfig, input, context);

        if (result.status != IntgConstants.STATUS_SUCCESS)
            return result;

    });

    if (Object.keys(result).length == 0)
        result.status = IntgConstants.STATUS_SUCCESS;

    return result;
};

GLAccountActions.prototype = {
    initialize: function() {},

    type: 'GLAccountActions'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-09-05 11:27:30</sys_created_on>
        <sys_id>e683d6c0c7f33300a3bdb6f827c2609c</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>GLAccountActions</sys_name>
        <sys_package display_value="Finance - ERP Integration" source="sn_fcms_intg">0b4eadd1531113008f12ddeeff7b126d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Finance - ERP Integration">0b4eadd1531113008f12ddeeff7b126d</sys_scope>
        <sys_update_name>sys_script_include_e683d6c0c7f33300a3bdb6f827c2609c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-12 13:41:15</sys_updated_on>
    </sys_script_include>
</record_update>
